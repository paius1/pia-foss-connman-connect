#!/opt/bin/bash
#    v 0.0.1
#    SCRIPTNAME 
#        runs after pia-wireguard service stops
#        or is run by System.Exec in Favourites
#        stop pia-wireguard.service, deletes any wireguard configs
#        restores the firewall, restores nameservers
#        stops port_forwarding.sh
#        add any vpn sensitive applications e.g. transmission to stop
#        at the end
#        
####
# c plgroves @ 2022

  # PIA's scripts are set to a relative path
    cd "${0%/*}" || exit 255

  # get user defined iptables rules
    source .env 2>/dev/null

    _Usage() {
         sed >&2 -n "1d; /^###/q; /^#/!q; s/^#*//; s/^ //; 
                     s/SCRIPTNAME/${BASH_SOURCE##*/}/; p" \
                    "${BASH_SOURCE%/*}/${BASH_SOURCE##*/}"
         exit 1; }
    [[ "$1" =~ ^[-hH] ]] && _Usage "$@"

    function logger() {
        local message="${1}"; local source="${2:-${BASH_SOURCE}}"; local log="${3:-$LOG}"
        local tab spaces 
        tab="${TAB:-100}"
        IFS="" spaces="$(printf "%$((tab*2))s")"
        printf %s:[%s]:%.$((${tab}-${#source}))s%s%s  "$(date)" "$(cut -d- -f2- <<< "${source##*/}") " "${spaces} " "${message}" $'\n'| tee -a "${log}"
}

    log="${LOG:=/dev/null}"
    LOG="${1:-${log}}" # export LOG to environment to monitor these scripts
    bash_source="${#BASH_SOURCE}"; export TAB=$((bash_source+1))

  # If pia-wireguard.service is running and
  # ${BASH_SOURCE##*} wasn't called by systemd
  # shut the service down, which will do everything that follows.
    if [ -z "${PRE_UP_RUN+y}" ] # not called by systemd
    then logger "${BASH_SOURCE##*/} was not started by systemd"
         if systemctl is-active --quiet pia-wireguard.service # service is running
         then systemctl stop pia-wireguard.service
              # now this script will run with PRE_UP_RUN set
              exit 0
         fi
    fi

  # stop running run_setup.sh's #
    pids=($(pidof run_setup.sh)) #
    if [ "${#pids[@]}" -gt 0 ] #
    then # remove this instance from pids[@] #
         logger "run_setup.sh is already running, will stop" #
         echo "${pids[@]}" | xargs kill -9 >/dev/null 2>&1 #
    fi

    [ -z "${kodi_user}" ] && source ./kodi_assets/functions
    REGION="$(/opt/bin/jq -r '.name' < /tmp/regionData )"
  # disconnect VPN
    logger 'Disconnecting from '"${REGION}"''
    connmanctl disconnect "$(grep vpn_ < <( connmanctl services) | awk '{print $NF}')"

    [[ ! -t 0 && ! -n "${SSH_TTY}" ]] \
    && _pia_notify 'Disconnected from '"${REGION}"' '

# OKAY now iptables, DNS are all mangled?

  # restore firewall
  # previously defined or saved firewall fallback ./openrules.v4
    logger "restoring the  firewall"
    if [ -z "${MY_FIREWALL}" ] && [ -f /tmp/my_firewall.v4 ]
    then MY_FIREWALL='/tmp/my_firewall.v4'
    fi
    iptables-restore < "${MY_FIREWALL:-openrules.v4}"

  # restore a sane DNS .cache/starting_resolv.conf is saved at startup
    logger "restoring DNS nameservers"
    if [ -f /storage/.cache/starting_resolv.conf ]
    then cat /storage/.cache/starting_resolv.conf > /etc/resolv.conf
    else logger "no preexisting resolv.conf winging it"
         # first active non vpn_ interface
           iface=$(connmanctl services | awk '/^\*/ && !/vpn_/{print $NF; exit}')
         # Nameserver definition from $iface/settings
           mapfile  -d ' '  NS < <(awk -F'[=|;]' '/^Nameserver/{print $2}'  /storage/.cache/connman/${iface}/settings)
           nameserver="${NS[0]:-208.67. 222.222}"
    cat <<- EOF > /etc/resolv.conf
    # Generated by PIA WIREGUARD
    nameserver "${nameserver}"
EOF
    fi

  # stop port forwarding 
    logger "stopping port forwarding"
    pf_pids=($(pidof port_forwarding.sh))
    if [ "${#pf_pids[@]}" -ne 0 ]
    then logger "Stopping port forwarding"
         echo "${pf_pids[@]}" | xargs kill -9 >/dev/null 2>&1
         > /tmp/port_forward.log
    fi

# add anything else such stopping applications and port forwarding
exit 0
