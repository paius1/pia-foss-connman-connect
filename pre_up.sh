#!/opt/bin/bash
#    v 0.0.1, c plgroves gmail 2022
#    SCRIPTNAME called by PATH/run_setup.sh
#               or ExecStartPre in service unit file
#        
#        sets a safe and sane environment
#         e.g. disconnect vpn_XX_XX_XX_XX
#              reset firewall
#              check DNS resolution
#              stop vpn dependent applications e.g. port_forwarding, transmission
####
# 

    _Usage() {
         sed >&2 -n "1d; /^###/q; /^#/!q; s/^#*//; s/^ //; 
                     s!PATH!$(pwd)!; s/SCRIPTNAME/${BASH_SOURCE##*/}/; p" \
                    "${BASH_SOURCE%/*}/${BASH_SOURCE##*/}"
         exit 1; }
    [[ "$1" =~ ^[-hH] ]] && _Usage "$@"

  # PIA's scripts are set to a relative path
    cd "${0%/*}" || exit 255

    export PATH=/opt/bin:/opt/sbin:"${PATH}"

  # source functions
    [ -z "${kodi_user}" ] \
    && source ./kodi_assets/functions #

# DEBUGGING
export LOG="${LOG:-/tmp/pia-wireguard.log}"
_logger "Starting $(pwd)/${BASH_SOURCE##*/}"

  # CHECK FOR SYSTEM STARTUP
    if [[ "$(awk -F'.' '{print $1}' < /proc/uptime)" -lt 60 ]]
  # System has just started wait, save a copy of /run/connman/resolv.conf and the routing table
    then _logger "System Startup waiting..."
         sleep 1
       # Assume the nameservers at startup are good
         cp -v /run/connman/resolv.conf /storage/.cache/starting_resolv.conf \
          |& tee >(_logger)
       # Same for the routing table
         ip route save table all > /storage/.config/ip_route_clean.bin
         _logger "backed up routing table to /storage/.config/ip_route_clean.bin"
    fi

  # Recommend running as a systemd service
    if _is_unset PRE_UP_RUN
  # No systemd service
    then _logger "No systemd service exists"
    fi

  # Stop any vpn's connections
  # First service is connected service, is it a vpn?
    wg_0="$(connmanctl services | awk 'NR == 1 && /vpn_/ {print $NF}')"

    if [[ -n "${wg_0}" ]]
  # Vpn active
    then _logger "$(connmanctl disconnect "${wg_0}")"
       # GUI Notification
         _is_not_tty \
           && _pia_notify 'Disconnected from '"${REGION}"' ' 7000 "pia_off_48x48.png"

       # reset pia.config age
         touch ~/.config/wireguard/pia.conf

    else _logger "No current vpn connection"
  # NO
    fi

  # Can I reach the interwebs
    if ! ping -c 1  -W 1  -q 208.67. 222.222 > /dev/null 2>&1
  # No # Note to self $MY_FIREWALL is passed to this script by run_setup.sh
    then iptables-restore < "${MY_FIREWALL:-openrules.v4}"
         _logger "restored ${MY_FIREWALL:-openrules.v4} firewall"
  # Yes
    else _logger "Can reach interwebs"
    fi

  # Check if we can dig it
    if ! dig +time=1 +tries=1 privateinternetaccess.com >/dev/null
  # No, restore valid nameservers
    then _logger "restoring DNS nameservers"
         if [ -f /storage/.cache/starting_resolv.conf ]
       # There's a copy of /etc/resov.conf saved at system start by pre_up.sh
         then cp -v /storage/.cache/starting_resolv.conf /run/connman/resolv.conf \
               |& tee >(_logger)

         else _logger "no preexisting resolv.conf winging it"
       # or create a new resolv.conf from connman settings
            # Get nameservers from first active non vpn_ interface
              iface=$(connmanctl services | awk '/^\*/ && !/vpn_/{print $NF; exit}')
              mapfile -d ' ' NS < <(awk -F'[=|;]' '/^Nameserver/{printf "%s", $2}' ~/.cache/connman/"${iface}"/settings)
            # or fall back to opendns
              nameserver="${NS[0]:-208.67. 222.222}"

    cat <<- EOF > /run/connman/resolv.conf
    # Generated by PIA WIREGUARD
    nameserver "${nameserver}"
EOF
         fi
    fi

  # timeout for systemd's sake
    max_count=15

    until ping -c 1 -W 1 -q privateinternetaccess.com > /dev/null
  # wait for full connection
    do   sleep 2
       # end at some point
         ((count++))
         if [ "${count}" -gt "${max_count}" ]
       # wait 30 seconds and exit
         then _logger "Interwebs failed after half a minute"
              exit 1
         fi
    done
    _logger "Have full network access"

  # Port Forwarding cleanup
    pf_pids=($(pidof port_forwarding.sh))
    if [ "${#pf_pids[@]}" -ne 0 ]
  # stop portforwarding 
    then _logger "Stopping port forwarding"
         echo "${pf_pids[@]}" \
            | xargs kill -9 >/dev/null 2>&1
    fi

################ Add other applications to stop below #################
#
exit 0
