#!/opt/bin/bash
#    v 0.0.1, c plgroves gmail 2022
#    SCRIPTNAME called by PATH/run_setup.sh
#        before pia-wireguard service is up
#        
#        sets a safe and sane environment
#         e.g. disconnect vpn_XX_XX_XX_XX
#              reset firewall
#              set nameservers
#              stop vpn dependent applications e.g. port_forwarding, transmission
####
# 

    _Usage() {
         sed >&2 -n "1d; /^###/q; /^#/!q; s/^#*//; s/^ //; 
                     s!PATH!$(pwd)!; s/SCRIPTNAME/${BASH_SOURCE##*/}/; p" \
                    "${BASH_SOURCE%/*}/${BASH_SOURCE##*/}"
         exit 1; }
    [[ "$1" =~ ^[-hH] ]] && _Usage "$@"

  # PIA's scripts are set to a relative path
    cd "${0%/*}" || exit 255

    export PATH=/opt/bin:/opt/sbin:/usr/bin:/usr/sbin

    function logger() {
        local message="${1}"; local source="${2:-${BASH_SOURCE[0]}}"; local log="${3:-$LOG}"
        local tab spaces 
        tab="${TAB:-100}"
        IFS="" spaces="$(printf "%$((tab*2))s")"
        printf %s:[%s]:%.$((${tab}-${#source}))s%s%s  "$(date)" "$(cut -d- -f2- <<< "${source##*/}") " "${spaces} " "${message}" $'\n'| tee -a "${log}"
        [[ -z "${PRE_UP_RUN+y}" ]] \
        && systemd-cat -t pia-wireguard.favourites -p warning <<< "${message}"
    }

    log="${LOG:=/dev/null}" # export or set LOG to monitor scripts added to pia-foss
    LOG="${1:-${log}}"
    bash_source="${#BASH_SOURCE[0]}"
    export TAB=$((bash_source+1))

  # on SYSTEM START wait for things to settle down
  # and save a copy of /etc/resolv.conf, and the routing table
    if [[ "$(awk -F'.' '{print $1}' < /proc/uptime)" -lt 60 ]]
    then logger "System Startup waiting..."
         sleep 3
         cp /etc/resolv.conf /storage/.cache/starting_resolv.conf
         ip route save table all > /storage/.config/ip_route_clean.bin
    fi

    logger "Checking wireguard state"
  # stop any VPN's previously started
  # [ -z "${PRE_UP_RUN+y}"  ] then chances we don't have a service?
  # this is redundant because run_setup.sh catches this!? (better safe that sorry) 
  # 
    if [[ -z "${PRE_UP_RUN+y}" ]] && [[ ! -t 0 && ! -n "${SSH_TTY}" ]]
  # Not called by systemd does service exist?, running?
    then logger "$(pwd)/${BASH_SOURCE##*/} was not started by systemd"
         if [[ "$(systemctl list-unit-files pia-wireguard.service | wc -l)" -gt 3 ]]
       # there is a service
         then if systemctl is-active --quiet pia-wireguard
            # and it is running. Restart it.
              then systemctl restart pia-wireguard &
            # or not
              else systemctl start pia-wireguard &
              fi
              exit 0
       # wireguard is controlled by connmanctl
         else iface="$(grep vpn_ < <( connmanctl services) | awk '{print $NF}')"
              logger "Disconnecting ${iface}"
              connmanctl disconnect "$${iface}"
         fi
  # Called by systemd
    else logger "Called systemd service PRE_UP_RUN=${PRE_UP_RUN} "
    fi

  # Can I reach the interwebs
    if ! ping -c 1  -W 1  -q 208.67. 222.222 > /dev/null 2>&1
  # No
    then logger "restoring firewall"
         iptables-restore < ${MY_FIREWALL:-openrules.v4}
    fi

  # can I resolve hostnames
    if ! dig +time=1 +tries=1 privateinternetaccess.com >/dev/null
  # No
    then logger "restoring DNS"
         # this is a copy of /etc/resov.conf saved at system start by pre_up.sh
           if [ -f /storage/.cache/starting_resolv.conf ]
           then cat /storage/.cache/starting_resolv.conf > /etc/resolv.conf
           else logger "no preexisting resolv.conf winging it"
                # get nameservers from first active non vpn_ interface
                  iface=$(connmanctl services | awk '/^\*/ && !/vpn_/{print $NF; exit}')
                  mapfile  -d ' '  NS < <(awk -F'[=|;]' '/^Nameserver/{print $2}'  /storage/.cache/connman/"${iface}"/settings)
                # or fall back to opendns
                  nameserver="${NS[0]:-208.67. 222.222}"

    cat <<- EOF > /etc/resolv.conf
    # Generated by PIA WIREGUARD
    nameserver "${nameserver}"
EOF
         fi
    fi

  # timeout for systemd's sake
    max_count=10
  # Now wait for full connection
    until ping -c 1 -W 1 -q privateinternetaccess.com > /dev/null
    do sleep 2
       # end at some point
         ((count++))
         [ "${count}" -gt "${max_count}" ] \
         && { logger "Interwebs failed"; exit 1; }
    done

  # stop portforwarding 
    pf_pids=($(pidof port_forwarding.sh))
    if [ "${#pf_pids[@]}" -ne 0 ]
    then logger "Stopping port forwarding"
         echo "${pf_pids[@]}" \
            | xargs kill -9 >/dev/null 2>&1
    fi

################ Add other applications to stop below #################
#
exit 0
