#! /opt/bin/bash
# c plgroves gmail 2022
# pia-foss-wireguard kodi functions

  # add kodi GUI.Notifications with timeouts and images
  #     _pia_notify 'message' 'display time' 'image file'
  # logging function
  #     _logger 'message' [ logfile ]
  # check for .env file changes
  # check for empty variables

  # credentials for local kodi
    kodi_user=kodi
    kodi_pass=
    kodi_host=localhost
    kodi_port=8080

  # logs to systemd journal, and/or screen and log file
    function _logger() {
        local message log source tab spaces date

        if read -t 0
      # there is something in stdin put it in ${@:1}
        then read -r new_one
             [[ -n "${new_one}" ]] \
               && set -- "${new_one}" "${@:1:2}"
        fi
        #
        message="${1:-lorem ipsum dolor sit amet}"
        log="${2:-$LOG}"
      # in case $LOG is not set
        log="${log:-/dev/null}"
        source="${3:-$(caller)}"
        tab=$((${#source}+1))
        IFS="" spaces="$(printf "%$((tab*2))s")"
        TZ="$( awk -F, 'END {print $1}' < <(strings /etc/localtime))"
        date="$(TZ="${TZ}" /opt/bin/date)"
        if [[ -z "${PRE_UP_RUN+y}" ]]
      # Running non-interactively but not from systemd: print to stdout and $log
        then
             printf %s:[%s]:%.$((${tab}-${#source}))s%s%s  "${date}" "$(cut -d- -f2- <<< "${source##*/}") " "${spaces} " "${message}" $'\n'| tee -a "${log}"
           # cat to systemd journal
             #systemd-cat -t pia-wireguard -p warning <<< "${message}"
        else echo "${message}"
      # send message to stdout
        fi
    }
  export -f _logger

  # match 'value' in kodi json
    function _parse_JSON {
        local key=$1
        /usr/bin/awk -F"[,:}]" \
                     '{for(i=1;i<=NF;i++)
                      {if($i~/'"${key}"'\042/)
                         {print $(i+1)}}}' \
                   | tr -d '"'
 }
  export -f _parse_JSON

  # send request to kodi json api
    function _kodi_REQ {
        /opt/bin/curl --silent -X POST --header "Content-Type: application/json" -d "$1" http://$kodi_user:$kodi_pass@$kodi_host:$kodi_port/jsonrpc
 }
  export -f _kodi_REQ

    function _pia_notify() {
        local message displaytime image image_path show_image

        if read -t 0
      # there is something in stdin put it in ${@:1}
        then read -r new_one
             [[ -n "${new_one}" ]] \
               && set -- "${new_one}" "${@:1:2}"
        fi
        #
        message="${1:-lorem ipsum dolor sit amet}"
        displaytime="${2:-5000}"
      # set default image file name
        image="${3:-"pia_on_48x48.png"}"
      # assume ./kodi_assets, and all scripts set working directory
        image_path="$(pwd)/kodi_assets"
      [[ -s "${image_path}/${image}" ]] \
         && show_image=',"image":"'"${image_path}/${image}"'"'

        status="$( _parse_JSON 'result' < <(_kodi_REQ ' {"jsonrpc": "2.0", "method": "GUI.ShowNotification", "params": {"title": "PIA Wireguard Connection", "message": "'"${message}"'" , "displaytime": '"${displaytime}"''"${show_image}"' }, "id": 1} '))"

        [[ "$status" =~ OK ]] \
        || return 1
        return 0
 }
  export -f _pia_notify

  # epoch creation time of file
    function _created() {
        /opt/bin/stat -c %Y "${1}" 2>/dev/null \
                 || \
                 echo $?
        return 0
 }
    export -f _created

  # interval between now and then
    function _interval() {
        local now 'then'
        then="${1:-1}"
    
        now="$(printf '%(%s)T' \
                    | tee "${2:-/dev/null}")"
        echo -n "$((now-${then}))"
    return 0
 }
    export -f _interval

  # check variable empty of unset
    function _is_empty() {
        [[ -z "${1}" ]]
 } #
    export -f _is_empty

    function _hmmss() {
        local time="$1"
        local h m s
        ((s=time%60, time/=60, m=time%60, h=time/60))
        printf "%d hrs %02d mins %02d secs" "${h#-}" "${m#-}" "${s#-}"
 }
    export -f _hmmss

