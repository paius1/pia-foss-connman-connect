#! /opt/bin/bash
# c plgroves gmail 2022
# pia-foss-wireguard kodi functions

  # add kodi GUI.Notifications with timeouts and images
  #     _pia_notify 'message' ['display time' ['image file']]
  # logging function
  #     _logger 'message' ['logfile' ['calling script']]
  #
  # return file creation time
  # return interval now-then
  # return seconds as 'X hrs Y mins Z secs'
  # test for empty/unset variables n.b. test unset passes VARIABLE NAME
  # test if called interactively or not
  # display connection steps to GUI or tty
  # 
   ##This section in _logger _pia_notify ##
   ## wait for stdin from a pipe
   #  sleep 0.01 
   #  read -t 0 \
   #    && new_1=$(</dev/stdin)
   #  _is_empty "${new_1}" \
   #    || set -- "${new_1}" "${@:1:2}"
   ##################################### allows reading from a tee ##
   # e.g.
   # echo "Hello World" | tee >(_pia_notify [displaytime [image]]) >/dev/null
   #  or
   # echo "Hello World" |
   # tee >(_logger [log [source]]) >(_is_not_tty && _pia_notify [displaytime [image]]) >/dev/null
   #################################################

  # credentials for local kodi
    kodi_user=kodi
    kodi_pass=
    kodi_host=localhost
    kodi_port=8080

  # logs to systemd journal, and/or screen and log file
    function _logger() {
        local message log source tab spaces date

      # This section allows reading from a tee
      # e.g. echo "Hello World" | tee >(_logger [log [source]]) >/dev/null
      # wait for stdin from a pipe
        #sleep 0.01

      # there is something in stdin
        [[ -p /dev/stdin ]] \
          && 
        set -- "$(</dev/stdin)" "${@:1:2}"
      #
        message="${1:-lorem ipsum dolor sit amet}"
      # remove ANSI escape sequences
        message="$(sed -e 's/\x1b\[[0-9;]*m//g' <<< "${message}")"

      # in case $LOG is not set
        log="${2:-$LOG}"
        log="${log:-/dev/null}"

      # message sender
        source="${3:-$(caller)}"

      # align messages
        tab=$((${#source}+4))
        IFS="" spaces="$(printf "%$((tab*2))s")"

      # proper timestamps
        mapfile -t TZ < <(strings /etc/localtime)
        date="$(TZ="${TZ[-1]%%,*}" /opt/bin/date)"

      # running non-interactively but not from systemd: print to stdout and $log
        if _is_unset PRE_UP_RUN
        then while IFS= read -r line
      # print | tee to logfile
             do
                printf %s:[%s]:%.$((tab-${#source}))s%s%s  "${date}" "$(cut -d- -f2- <<< "${source##*/}") " "${spaces} " "${line}" $'\n' | tee -a "${log}"
             done <<< "$message"

        else echo "${message}"
        fi
    }
  export -f _logger

  # match 'value1|value2' in kodi json results
    function _parse_JSON {
        local key="$1"
        /usr/bin/awk -F"[,:}]" \
                     '{for(i=1;i<=NF;i++)
                      {if($i~/'"${key}"'\042/)
                         {print $(i+1)}}}' |
                 tr -d '"'
 }
  export -f _parse_JSON

  # send request to kodi json api
    function _kodi_REQ {
        /opt/bin/curl --silent -X POST --header "Content-Type: application/json" -d "$1" http://$kodi_user:$kodi_pass@$kodi_host:$kodi_port/jsonrpc
 }
  export -f _kodi_REQ

    function _pia_notify() {
        local message displaytime image image_path show_image

      # This section allows reading from a tee
      # e.g. echo "Hello World" | tee >(_pia_notify [displaytime [image]]) >/dev/null
      # wait for stdin from a pipe
        #sleep 0.01

      # there is something in stdin put it in ${@:1}
        [[ -p /dev/stdin ]] \
          && 
        set -- "$(</dev/stdin)" "${@:1:2}"

      # only last line of multi line messages
        message="$(sed -n '$p' <<< "${1:-lorem ipsum dolor sit amet}")"

      # escape newlines and tabs
        message="$(sed -z 's/\n/\\n/g;s/\t/\\t/g' <<< "${message}")"

      # remove ANSI escape sequences
        message="$(sed -e 's/\x1b\[[0-9;]*m//g' <<< "${message}")"

      # default kodi displaytime 5 seconds
        displaytime="${2:-5000}"

      # set default image file name
        image="${3:-"pia_on_48x48.png"}"

      # assume ./kodi_assets, and all scripts set working directory
        image_path="$(pwd)/kodi_assets"

      # add image to json
        [[ -s "${image_path}/${image}" ]] \
          && show_image=',"image":"'"${image_path}/${image}"'"'

        status="$( _parse_JSON 'result' < <(_kodi_REQ ' {"jsonrpc": "2.0", "method": "GUI.ShowNotification", "params": {"title": "PIA-Wireguard Manager", "message": "'"${message}"'" , "displaytime": '"${displaytime}"''"${show_image}"' }, "id": 1} '))"

        [[ "$status" =~ OK ]] \
          || return 1
        return 0
 }
  export -f _pia_notify

  # epoch creation time of file
    function _created() {
        /opt/bin/stat -c %Y "${1}" 2>/dev/null \
          || echo $?
        return 0
 }
    export -f _created

  # interval between now and then
    function _interval() {
        local now th3n
        th3n="${1:-1}"

        printf -v now '%(%s)T'
        echo -n "$((now-th3n))"
    return 0
 }
    export -f _interval

  # convert seconds to X hrs Y mins Z secs
    function _hmmss() {
        local time="$1"
        local h m s
        ((s=time%60, time/=60, m=time%60, h=time/60))
        printf "%d hrs %02d mins %02d secs" "${h#-}" "${m#-}" "${s#-}"
 }
    export -f _hmmss

  # check variable unset
    function _is_unset() {
        local VarName=$1
        [[ -z ${!VarName+y} ]]
 }
    export -f _is_unset

  # check variable empty
    function _is_empty() {
        [[ -z "${1}" ]]
 } #
    export -f _is_empty

  # check variable set
    function _is_set() {
        [[ -n "${1}" ]]
 } #
    export -f _is_set

  # running interactively
    function _is_tty() {
        [[ -t 0 || -n "${SSH_TTY}" ]]
 }
    export -f _is_tty

  # not running interactively
    function _is_not_tty() {
        ! [[ -t 0 || -n "${SSH_TTY}" ]]
 }
    export -f _is_not_tty

    function _service_is_active() {
        local service="$1"
        
        systemctl --quiet is-active  "${service}"
        echo $?
        
 }
    export -f _service_is_active

    function _print_connection_instructions() {
        
        if _is_tty
        then
      # running interactively
             cli="${cli:-}"
             (echo -e "to connect manually go to
\tSettings > Coreelec > Connections, select PIA ${cli#-*} and connect
\t    This may not set DNS and\tWILL NOT set iptables killswitch?
\tiptables-restore $(pwd)/rules-wireguard.v4  WILL!
\n\tTo (re)enable port forwarding run
    PIA_TOKEN=$PIA_TOKEN PF_GATEWAY=$WG_SERVER_IP PF_HOSTNAME=$WG_HOSTNAME $(pwd)/port_forwarding.sh
" 
             if [[ "${PIA_PF}" != 'true' ]]
           # add caveat
             then
                  echo -e "\tThe location used must be port forwarding enabled.
\tCall PIA_PF=true $(pwd)/get_region for a filtered list.
" 
             fi
             echo -e "\tport_forwarding.sh must be left running to maintain the port
\tIt WILL TIE UP A CONSOLE unless run in the background
             " ) |&
             tee -i >(_logger '/tmp/pia-wireguard.log') >/dev/null

        else
      # running non-interactively, log and Gui.Notifications
             echo 'Saved configuration for '"${REGION_NAME}"' ' |
              tee >(_logger; exit) >(_pia_notify; exit) >/dev/null
             sleep 3
             echo "Goto Settings >Coreelec >Connections" |
              tee >(_logger; exit) >(_pia_notify 10000; exit ) >/dev/null
             sleep 11
             echo "This precludes port forwarding and setting a firewall" |
              tee >(_logger; exit) >(_pia_notify 6000 'pia_off_48x48.png'; exit) >/dev/null
             sleep 5
             echo "Set CONNMAN_CONNECT=true to avoid this" |
              tee >(_logger; exit) >(_pia_notify 6000 'pia_off_48x48.png'; exit) >/dev/null
             sleep 6
        fi
    return 0
 }
    export -f _print_connection_instructions
